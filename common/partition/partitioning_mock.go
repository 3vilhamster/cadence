// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -package partition -source interface.go -destination partitioning_mock.go -self_package github.com/uber/cadence/common/partition
//

// Package partition is a generated GoMock package.
package partition

import (
	context "context"
	reflect "reflect"

	metrics "github.com/uber/cadence/common/metrics"
	gomock "go.uber.org/mock/gomock"
)

// MockPartitioner is a mock of Partitioner interface.
type MockPartitioner struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionerMockRecorder
	isgomock struct{}
}

// MockPartitionerMockRecorder is the mock recorder for MockPartitioner.
type MockPartitionerMockRecorder struct {
	mock *MockPartitioner
}

// NewMockPartitioner creates a new mock instance.
func NewMockPartitioner(ctrl *gomock.Controller) *MockPartitioner {
	mock := &MockPartitioner{ctrl: ctrl}
	mock.recorder = &MockPartitionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitioner) EXPECT() *MockPartitionerMockRecorder {
	return m.recorder
}

// GetIsolationGroupByDomainID mocks base method.
func (m *MockPartitioner) GetIsolationGroupByDomainID(ctx context.Context, scope metrics.Scope, pollerinfo PollerInfo, partitionKey PartitionConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsolationGroupByDomainID", ctx, scope, pollerinfo, partitionKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIsolationGroupByDomainID indicates an expected call of GetIsolationGroupByDomainID.
func (mr *MockPartitionerMockRecorder) GetIsolationGroupByDomainID(ctx, scope, pollerinfo, partitionKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsolationGroupByDomainID", reflect.TypeOf((*MockPartitioner)(nil).GetIsolationGroupByDomainID), ctx, scope, pollerinfo, partitionKey)
}
