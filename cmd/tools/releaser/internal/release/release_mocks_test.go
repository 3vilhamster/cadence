// Code generated by MockGen. DO NOT EDIT.
// Source: release.go
//
// Generated by this command:
//
//	mockgen -package release -source release.go -destination release_mocks_test.go -self_package github.com/uber/cadence/cmd/tools/releaser/release
//

// Package release is a generated GoMock package.
package release

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGit is a mock of Git interface.
type MockGit struct {
	ctrl     *gomock.Controller
	recorder *MockGitMockRecorder
	isgomock struct{}
}

// MockGitMockRecorder is the mock recorder for MockGit.
type MockGitMockRecorder struct {
	mock *MockGit
}

// NewMockGit creates a new mock instance.
func NewMockGit(ctrl *gomock.Controller) *MockGit {
	mock := &MockGit{ctrl: ctrl}
	mock.recorder = &MockGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGit) EXPECT() *MockGitMockRecorder {
	return m.recorder
}

// CreateTag mocks base method.
func (m *MockGit) CreateTag(tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockGitMockRecorder) CreateTag(tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockGit)(nil).CreateTag), tag)
}

// GetCurrentBranch mocks base method.
func (m *MockGit) GetCurrentBranch() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBranch")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBranch indicates an expected call of GetCurrentBranch.
func (mr *MockGitMockRecorder) GetCurrentBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBranch", reflect.TypeOf((*MockGit)(nil).GetCurrentBranch))
}

// GetRepoRoot mocks base method.
func (m *MockGit) GetRepoRoot() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoRoot")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoRoot indicates an expected call of GetRepoRoot.
func (mr *MockGitMockRecorder) GetRepoRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoRoot", reflect.TypeOf((*MockGit)(nil).GetRepoRoot))
}

// GetTags mocks base method.
func (m *MockGit) GetTags() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockGitMockRecorder) GetTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockGit)(nil).GetTags))
}

// PushTag mocks base method.
func (m *MockGit) PushTag(tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushTag", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushTag indicates an expected call of PushTag.
func (mr *MockGitMockRecorder) PushTag(tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushTag", reflect.TypeOf((*MockGit)(nil).PushTag), tag)
}

// MockFS is a mock of FS interface.
type MockFS struct {
	ctrl     *gomock.Controller
	recorder *MockFSMockRecorder
	isgomock struct{}
}

// MockFSMockRecorder is the mock recorder for MockFS.
type MockFSMockRecorder struct {
	mock *MockFS
}

// NewMockFS creates a new mock instance.
func NewMockFS(ctrl *gomock.Controller) *MockFS {
	mock := &MockFS{ctrl: ctrl}
	mock.recorder = &MockFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFS) EXPECT() *MockFSMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockFS) Build(dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockFSMockRecorder) Build(dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockFS)(nil).Build), dir)
}

// FindGoModFiles mocks base method.
func (m *MockFS) FindGoModFiles(root string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGoModFiles", root)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGoModFiles indicates an expected call of FindGoModFiles.
func (mr *MockFSMockRecorder) FindGoModFiles(root any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGoModFiles", reflect.TypeOf((*MockFS)(nil).FindGoModFiles), root)
}

// ModTidy mocks base method.
func (m *MockFS) ModTidy(dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModTidy", dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModTidy indicates an expected call of ModTidy.
func (mr *MockFSMockRecorder) ModTidy(dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModTidy", reflect.TypeOf((*MockFS)(nil).ModTidy), dir)
}
